---
title: "다이캐스팅 제조 공정 데이터 탐색적 분석 (EDA)"
author: "Data Analysis Team"
date: today
format:
  html:
    theme: cosmo
    toc: true
    toc-float: true
    toc-depth: 3
    code-fold: true
    code-copy: true
    code-line-numbers: true
    fig-width: 10
    fig-height: 6
    embed-resources: true
    smooth-scroll: true
    link-external-newwindow: true
execute:
  echo: true
  warning: false
  error: false
  cache: false
---

# 다이캐스팅 제조 공정 데이터 탐색적 분석 (EDA)

## 1. 데이터 개요

### 1.1 데이터셋 정보
- **train.csv**: 73,612개 행, 32개 열 (학습용 데이터)
- **test.csv**: 18,403개 행, 31개 열 (테스트 데이터)
- **목표 변수**: `passorfail` (0/1 - 품질 합격/불합격 판정)

### 1.2 주요 변수 설명

#### 기본 정보
- `id`: 고유 식별자 (제거 예정)
- `line`: 생산 라인 정보 (제거 예정)
- `name`: 제품명 (제거 예정)
- `mold_name`: 금형명 (제거 예정)
- `registration_time`: 등록일시 (제거 예정)

#### 운영 상태
- `working`: 가동 여부 (라벨 인코딩 적용)
- `emergency_stop`: 비상 정지 여부
- `tryshot_signal`: 시험 신호

#### 공정 파라미터
- `molten_temp`: 용탕 온도 (°C)
- `facility_operation_cycleTime`: 설비 표준 사이클 시간
- `production_cycletime`: 실제 생산 사이클 시간
- `low_section_speed`: 저속 구간 속도
- `high_section_speed`: 고속 구간 속도
- `molten_volume`: 용탕량
- `cast_pressure`: 주조 압력

#### 금형 온도 관리
- `upper_mold_temp1~3`: 상형 온도 1~3
- `lower_mold_temp1~3`: 하형 온도 1~3
- `sleeve_temperature`: 슬리브 온도
- `biscuit_thickness`: 비스킷 두께

#### 기타 측정값
- `physical_strength`: 물리적 강도
- `Coolant_temperature`: 냉각수 온도
- `EMS_operation_time`: 전자기교반 가동 시간
- `mold_code`: 금형 코드
- `heating_furnace`: 가열로 구분 (A, B, C)

---

## 2. 라이브러리 로딩 및 기본 설정

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')

plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False

print("📊 다이캐스팅 제조 공정 EDA 분석을 시작합니다!")
```

## 3. 데이터 로딩

```{python}

try:
    train = pd.read_csv('./data/train.csv')
    test = pd.read_csv('./data/test.csv')
    
    print("✅ 데이터 로딩 성공!")
    print(f"📈 Train 데이터: {train.shape}")
    print(f"📈 Test 데이터: {test.shape}")
    print(f"🔍 컬럼: {list(train.columns)}")
except FileNotFoundError:
    print("❌ ./data/train.csv, ./data/test.csv 파일을 확인해주세요.")
```


## 4. 데이터 전처리

```{python}

if 'train' in locals() and 'test' in locals():
    drop_columns = ['id', 'line', 'name', 'mold_name', 'registration_time']
    
    train_model = train.drop(columns=drop_columns, errors='ignore')
    test_model = test.drop(columns=drop_columns, errors='ignore')
    
    le_working = LabelEncoder()
    train_model['working_encoded'] = le_working.fit_transform(train_model['working'])
    test_model['working_encoded'] = le_working.transform(test_model['working'])
    
    working_mapping = dict(zip(le_working.classes_, le_working.transform(le_working.classes_)))
    
    train_model = train_model.drop(columns=['working'])
    test_model = test_model.drop(columns=['working'])
    
    categorical_cols = [col for col in train_model.columns if train_model[col].dtype == 'object']
    numeric_cols = [col for col in train_model.columns if train_model[col].dtype != 'object']
    
    print("✅ 전처리 완료")
    print(f"🏷️ 범주형 변수: {categorical_cols}")
    print(f"🔢 수치형 변수: {numeric_cols}")
```


## 5. 기본 데이터 정보 확인

```{python}
if 'train_model' in locals():
    print(train_model.info())
    print(f"\n샘플 수: {len(train_model)}")
    print(f"변수 수: {len(train_model.columns)}")
```

## 6. 결측치 확인

```{python}

if 'train_model' in locals() and 'test_model' in locals():
    missing_train = train_model.isnull().sum()
    missing_test = test_model.isnull().sum()
    print("Train 결측치\n", missing_train[missing_train>0])
    print("\nTest 결측치\n", missing_test[missing_test>0])
```

## 7. 목표 변수 분석

```{python}

if 'train_model' in locals():
    target_counts = train_model['passorfail'].value_counts().sort_index()
    target_ratio = train_model['passorfail'].value_counts(normalize=True).sort_index()
    
    print(target_counts)
    print(target_ratio)
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    colors = ['#FF6B6B', '#4ECDC4']
    target_counts.plot(kind='bar', ax=ax1, color=colors)
    ax2.pie(target_ratio.values, labels=['Fail','Pass'], autopct='%1.1f%%', colors=colors)
    plt.show()
```

## 8. 범주형 변수 분석

```{python}

if 'train_model' in locals():
    categorical_analysis_cols = ['working_encoded','emergency_stop','tryshot_signal','heating_furnace']
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    axes = axes.flatten()
    
    for i, col in enumerate(categorical_analysis_cols):
        if col in train_model.columns:
            train_model[col].value_counts().plot(kind='bar', ax=axes[i], color='skyblue')
            axes[i].set_title(f'{col} 분포')
    plt.tight_layout()
    plt.show()
```

## 9. 범주형 변수와 목표 변수 관계

```{python}

if 'train_model' in locals():
    categorical_analysis_cols = ['working_encoded','emergency_stop','tryshot_signal','heating_furnace']
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    axes = axes.flatten()
    
    for i, col in enumerate(categorical_analysis_cols):
        if col in train_model.columns:
            crosstab = pd.crosstab(train_model[col], train_model['passorfail'], normalize='index')
            crosstab.plot(kind='bar', stacked=True, ax=axes[i], color=['#FF6B6B','#4ECDC4'])
            axes[i].set_title(f'{col} vs passorfail')
    plt.tight_layout()
    plt.show()
```
